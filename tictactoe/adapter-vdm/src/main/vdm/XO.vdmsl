--
-- A simple model of a tic-tac-toe game (noughts and crosses)
--

module XO
exports all
definitions

types

	Player = <NOUGHT> | <CROSS>; -- Just two players

	Pos ::                             -- A position for a move
		row : nat1
		col : nat1
	inv p ==
		p.row <= SIZE and p.col <= SIZE; -- Row/col must be on the board

	Moves = seq of Pos				                  -- A legal game play sequence
	inv moves ==
		len moves = card elems moves and			    -- Has no duplicated moves
		len moves > card PLAYERS * (SIZE - 1) and	-- Has minimum moves to win 
		len moves <= MAX;							            -- Hasn't too many moves

	PlayOrder = seq1 of Player				 -- The order of play of the players
	inv order ==
		len order = card elems order and -- No duplicates in the list
		elems order = PLAYERS;           -- Order contains all players

	Game ::	-- A game (who has moved where)
    board : map Pos to Player
    order : PlayOrder
	inv g ==
    moveCountLeft(g) >= 0 and
    -- No player is ever more than one move ahead of the next player
    forall i in set inds g.order \ { len g.order } &
      let
        current = g.order(i),
        next = g.order(i+1)
      in
        card movesForPlayer(g, current) - card movesForPlayer(g, next) in set {0, 1}


values

	SIZE: nat1 = 3; -- The size of the board (3x3)

	MAX: nat1	= SIZE * SIZE; -- The maximum number of moves

	S: set of nat1 = {1, ..., SIZE};

	PLAYERS	= { p | p: Player }; -- The set of all Players

	winningLines = dunion                                -- Sets of Pos for winning lines
	{
		{{ mk_Pos(r, c)			| c in set S } | r in set S }, -- All rows
		{{ mk_Pos(r, c)			| r in set S } | c in set S }, -- All columns
		{{ mk_Pos(x, x)			| x in set S }},               -- Diagnonal
		{{ mk_Pos(x, SIZE-x+1)	| x in set S }}            -- Other diagonal
	};


functions

	hasWon: Game * Player -> bool
	hasWon(g, p) ==
		let moves = movesForPlayer(g, p) in
			exists line in set winningLines &
				line subset moves;

  hasLost: Game * Player -> bool
  hasLost(g, p) == not hasWon(g, p);

	whoWon: Game -> Player
	whoWon(g) ==
		iota p: Player & hasWon(g, p)
	pre isWon(g);


	isWon: Game -> bool
	isWon(g) ==
		exists1 p: Player & hasWon(g, p);


	isDraw: Game -> bool
	isDraw(g) ==
		not isWon(g) and moveCountLeft(g) = 0;


	isUnfinished: Game -> bool
	isUnfinished(g) ==
		not isWon(g) and not isDraw(g);


	movesSoFar: Game -> set of Pos
	movesSoFar(g) ==
		dom g.board;


	moveCountSoFar: Game -> nat
	moveCountSoFar(g) ==
		card movesSoFar(g);


	moveCountLeft: Game -> nat
	moveCountLeft(g) ==
		MAX - moveCountSoFar(g);


	movesForPlayer: Game * Player -> set of Pos
	movesForPlayer(g, p) ==
		dom (g.board :> {p});

	move: Game * Player * Pos -> Game
	move(g, p, pos) ==
		mk_Game(g.board munion { pos |-> p }, g.order)
	pre hasTurn(g, p) and
    pos not in set movesSoFar(g) and
		moveCountLeft(g) > 0
  post moveCountSoFar(RESULT) = moveCountSoFar(g) + 1;

  getPlayOrder: Game +> PlayOrder
  getPlayOrder(g) == g.order;

  getBoard: Game +> map Pos to Player
  getBoard(g) == g.board;

  hasTurn: Game * Player +> bool
  hasTurn(g, p) ==
    let
      order = getPlayOrder(g),
      numPlayers = len order,
      numMoves = card movesSoFar(g)
    in
      order((numMoves mod numPlayers) + 1) = p;

end XO
